//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.1026
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;


namespace AssemblyCSharp {
	public class CameraHelper {

		public static Vector3 CompensateCameraCollision (Vector3 anchorGlobal, Vector3 aspiredPositionGlobal, LayerMask layerMask, float wallOffsetAmount) {

			Debug.DrawLine (anchorGlobal, aspiredPositionGlobal, Color.green);
			Debug.DrawRay (aspiredPositionGlobal, Vector3.up , Color.green);

			aspiredPositionGlobal = Lengthen (anchorGlobal, aspiredPositionGlobal, wallOffsetAmount);

			Debug.DrawRay (aspiredPositionGlobal, Vector3.up);

			Vector3 newPosition;

			RaycastHit hitInfo;
			if (Physics.Linecast (anchorGlobal, aspiredPositionGlobal, out hitInfo, layerMask)) {
				
				Debug.DrawRay (hitInfo.point, hitInfo.normal * 10, Color.red);
				
				newPosition = hitInfo.point;
			} else
				newPosition = aspiredPositionGlobal;

			Debug.DrawRay (newPosition, Vector3.down , Color.magenta);

			newPosition = SetOff (newPosition, anchorGlobal, wallOffsetAmount);
			Debug.DrawRay (newPosition, Vector3.down, Color.cyan);

			return newPosition;
		}
		
		private static Vector3 SetOff(Vector3 from, Vector3 to, float amount) {
			
			Vector3 direction = to - from;
			direction.Normalize ();
			
			return from + direction * amount;
		}
		
		private static Vector3 Lengthen(Vector3 from, Vector3 to, float amount) {
			
			Vector3 direction = to - from;
			direction.Normalize ();
			
			return to + direction * amount;
		}
	}
}

